---- GROUP ----
>> Fill in the names and email addresses of your group members.
곽대훈 <pmon2648@daum.net>
김경숙 <lovablekks@naver.com>
김예린 <dhm04022@naver.com>

---- PRELIMINARIES ----
>> Describe briefly which parts of the assignment were implemented by each member of your team and specify the contribution between
your member, say 3:3:4, or 1:3:6.
곽대훈:김경숙:김예린 = 4:3:3
곽대훈: 4: 전반적 설계 및 개발
김경숙: 3: `kernel/list.h` 사용 가이드, DESIGNDOC
김예린: 3: `devices/timer.h` blocking 모드 설계, DESIGNDOC


                                            ALARM CLOCK
                                            ===========
---- DATA STRUCTURES ----
>> A1: Copy here the declaration of each new or changed `struct’ or `struct' member, global or static variable, `typedef', or enumeration.
Identify the purpose of each in 25 words or less.

  > (thread.h) : thread 구조체에 wakeup_tick 변수 추가
    struct thread
      {
      ...
        int64_t wakeup_tick: thread가 block 되었을 때 깨어나야할 시간
      };

  > (thread.c) : 전역 변수 두개 추가
    - static struct list wait_list : wait queue에 해당하는 list, block 상태의 thread를 저장
    - int64_t min_wait_tick = INT64_MAX : block 상태의 thread 중 가장 먼저 wake 해줘야 하는 thread의 tick값 저장

---- ALGORITHMS ----
>> A2: Briefly describe what happens in a call to timer_sleep(), including the effects of the timer interrupt handler.

  > 기존의 timer_sleep()함수는 busy waiting 방식으로 실행되어서 불필요한 시스템 자원(cpu, 전력 소모)을 낭비한다. 
    수정한 timer_sleep()은 thread가 sleep을 할 때 block 상태로 만들어 wait_list에 넣어뒀다가 
    깰 시간이 되면 다시 ready 상태로 바꿔주어 cpu 자원을 효율적으로 사용할 수 있다.

>> A3: What steps are taken to minimize the amount of time spent in the timer interrupt handler?

  (1) thread_init()에서 thread_init (&wait_list) 라인 추가 : wait_list를 사용 전 초기화

  (2) void thread_sleep (int limit_tick) : sleep 시킬 thread를 wait_list에 추가하고 block상태로 만들어준다. 
      interrupt를 무시하고 함수를 실행해야 하므로 처음에 intr_disable()을 이용해 interrupt를 받아들이지 않도록 설정하고
      함수 내부가 다 실행되고 나면 마지막에 다시 intr_set_level(old_level)함수를 통해 interrupt를 받아들이도록 한다.
  * timer.c의 timer_sleep()에서 while문을 없애서 thread_sleep(ticks+start)로 바꿈으로써 busy waiting을 sleep/wakeup 방식으로 변경하였다.

  (3) thread_tick()에서 timer_ticks()가 min_wait_tick보다 커지면 check_wakeup_threads() 호출

  (4) void check_wakeup_threads (void) : wait_list에서 자고 있는 thread를 깨워주는 함수. 
      wait_list의 모든 entry를 보고 현재 tick값이 깨워야 할 tick값보다 작으면 wait queue에서 삭제하고 unblock해준다.

  + int thread_get_wakeup_tick (void) : thread_current에 대한 getter역할
  + int thread_set_wakeup_tick (int tick) : thread_current에 대한 setter역할
